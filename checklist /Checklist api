✨۱۲ نکته شکار باگ API که باید در تارگت خود امتحان کنید! 😎

1️⃣ XSS Blind از طریق هدرهای درخواست
برنامه‌ها داده‌های شما را به روش‌های مختلفی، از جمله به‌صورت ناامن، ثبت می‌کنند. همیشه آسیب‌پذیری‌های blind xss را با تزریق payload در هدرهای درخواست رایج آزمایش کنید، مانند:  
• Referrer  
• X-Forwarded-For، X-Forwarded-Host، X-Forwarded-Ip، Host (در صورت وجود پراکسی معکوس)  
• User-Agent  
• و غیره  

2️⃣ نقاط پایانی API قدیمی
آیا مسیرهای درخواست شما با "/api/v2" شروع می‌شوند؟ نقاط پایانی قدیمی را آزمایش کنید با:  
• جایگزین کردن "/api/v2" با "/api/v1"  
• حذف کامل "/v2"  

به‌طور مشابه، اگر ساب‌دامین باشد: api-v2.example.com → api-v1.example.com یا api.example.com  

3️⃣ آزمایش برای SSRF
هرگاه بخشی از یک URI را در درخواست خود مشاهده کردید، آن را با یک URL تحت کنترل خود جایگزین کنید و به تعاملات ورودی گوش کنید! 

4️⃣ یافتن نقاط پایانی بیشتر
سطح حمله را با یافتن نقاط پایانی بیشتر از طریق موارد زیر گسترش دهید:  
• بررسی GitHub  
• استفاده از دورک در گوگل/بینگ/DDG  
• تحلیل فایل‌های جاوااسکریپت  
• شمارش API Swagger یا سایر مستندات  

5️⃣ آزمایش برای CSRF
آسیب‌پذیری‌های CSRF را با موارد زیر آزمایش کنید:  

• حذف توکن Anti-CSRF 
• جایگزین کردن توکن Anti CSRF با توکن دیگری با همان طول  
• تغییر نوع محتوا (از "application/json" به "application/x-www-form-urlencoded")  
• تغییر متد درخواست (از "PUT" به "POST")  

6️⃣ بهره‌برداری از JWTها
برخی APIها از JWT برای احراز هویت استفاده می‌کنند.  
الگوریتم‌های امضای ضعیف (مانند "none" یا کلیدهای متقارن) را بررسی کنید و دستکاری توکن را امتحان کنید.


7️⃣دور زدن پاسخ‌های 401/403

اگر با پاسخ 401 یا 403 هنگام درخواست یک مسیر مواجه شدید؟ این موارد را امتحان کنید:
- دسترسی به یک مسیر تودرتو (مثال: /admin 401 → /admin/system-resources 200)

- افزودن کاراکتر خاص برای دور زدن فیلترهای ضعیف (فاصله، بایت نال، CRLF و ...)

- تغییر روش درخواست (Request Method)

- جعل آدرس IP با استفاده از هدرهای Host، X-Forwarded-For یا Referer

- جعل User-Agent

8️⃣ Cors Misconfiguration 

‌ cors Misconfiguration را بررسی کنید و تست کنید که آیا API اجازه درخواست از هر منبعی با احراز هویت (credentials) را می‌دهد.

9️⃣تست Race Conditions

Race conditions را در نقاط انتهایی API که عملیات حساس انجام می‌دهند و ممکن است در صورت اجرای همزمان مورد سوءاستفاده قرار گیرند، تست کنید.

روی تراکنش‌های با ارزش بالا تمرکز کنید، مانند:
- آپلود فایل
- پردازش یا ثبت سفارش
- احراز هویت پرداخت
- انتقال یا برداشت وجه
- تخصیص منابع
- تغییرات وضعیت در جریان‌های تأیید

🔟تست XXE

API فقط داده‌های JSON را قبول می‌کند؟ نوع محتوا (Content-Type) را از "application/json" به "application/xml" تغییر دهید و آسیب‌پذیری‌های XXE را تست کنید!

1️⃣1️⃣تست تزریق NoSQL

پارامترهای بدنه (body) را دستکاری کنید و یک payload مربوط به MongoDB (یا هر پایگاه داده NoSQL دیگر) اضافه کنید تا محدودیت‌ها را دور بزنید.

1️⃣2️⃣بررسی دور زدن آپلود فایل

سعی کنید فایل‌های مخرب را آپلود کنید با:
- دور زدن لیست‌های ممنوعیت پسوند فایل (مثال: php >>> phtml, php7, phar, inc, ...)
- ارسال فایل بدون پسوند
- استفاده از بایت نال برای دور زدن قوانین شامل (مثال: .php%00.png)
- آپلود فایل‌های پیکربندی سرور (مثال: htaccess، web config، ...)
- دور زدن محدودیت‌ها با افزودن بایت جادویی (magic byte) مجاز در payload خود.
